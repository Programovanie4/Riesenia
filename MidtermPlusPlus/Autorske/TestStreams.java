import LISTTestScoring.LISTTestScoring;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.Assert.*;

public class TestStreams {
    private static LISTTestScoring scoring = null;

    @BeforeClass
    public static void initScoring() {
        scoring = new LISTTestScoring();
        scoring.setScore("lang:common_list_test_scoring_name", 0, 100);
    }

    @Test
    public void test0() {
        assertEquals("pyramida/Test0", List.of(), Streams.pyramida(0).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test1", List.of(1), Streams.pyramida(1).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test2", List.of(2, 2, 1), Streams.pyramida(2).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test3", List.of(3, 3, 2, 3, 2, 1), Streams.pyramida(3).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test4", List.of(4, 4, 3, 4, 3, 2, 4, 3, 2, 1), Streams.pyramida(4).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test5", List.of(5, 5, 4, 5, 4, 3, 5, 4, 3, 2, 5, 4, 3, 2, 1), Streams.pyramida(5).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test6", List.of(6, 6, 5, 6, 5, 4, 6, 5, 4, 3, 6, 5, 4, 3, 2, 6, 5, 4, 3, 2, 1), Streams.pyramida(6).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test7", List.of(7, 7, 6, 7, 6, 5, 7, 6, 5, 4, 7, 6, 5, 4, 3, 7, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(7).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test8", List.of(8, 8, 7, 8, 7, 6, 8, 7, 6, 5, 8, 7, 6, 5, 4, 8, 7, 6, 5, 4, 3, 8, 7, 6, 5, 4, 3, 2, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(8).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test9", List.of(9, 9, 8, 9, 8, 7, 9, 8, 7, 6, 9, 8, 7, 6, 5, 9, 8, 7, 6, 5, 4, 9, 8, 7, 6, 5, 4, 3, 9, 8, 7, 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(9).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test10", List.of(10, 10, 9, 10, 9, 8, 10, 9, 8, 7, 10, 9, 8, 7, 6, 10, 9, 8, 7, 6, 5, 10, 9, 8, 7, 6, 5, 4, 10, 9, 8, 7, 6, 5, 4, 3, 10, 9, 8, 7, 6, 5, 4, 3, 2, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(10).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test11", List.of(11, 11, 10, 11, 10, 9, 11, 10, 9, 8, 11, 10, 9, 8, 7, 11, 10, 9, 8, 7, 6, 11, 10, 9, 8, 7, 6, 5, 11, 10, 9, 8, 7, 6, 5, 4, 11, 10, 9, 8, 7, 6, 5, 4, 3, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(11).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test12", List.of(12, 12, 11, 12, 11, 10, 12, 11, 10, 9, 12, 11, 10, 9, 8, 12, 11, 10, 9, 8, 7, 12, 11, 10, 9, 8, 7, 6, 12, 11, 10, 9, 8, 7, 6, 5, 12, 11, 10, 9, 8, 7, 6, 5, 4, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(12).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test13", List.of(13, 13, 12, 13, 12, 11, 13, 12, 11, 10, 13, 12, 11, 10, 9, 13, 12, 11, 10, 9, 8, 13, 12, 11, 10, 9, 8, 7, 13, 12, 11, 10, 9, 8, 7, 6, 13, 12, 11, 10, 9, 8, 7, 6, 5, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(13).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test14", List.of(14, 14, 13, 14, 13, 12, 14, 13, 12, 11, 14, 13, 12, 11, 10, 14, 13, 12, 11, 10, 9, 14, 13, 12, 11, 10, 9, 8, 14, 13, 12, 11, 10, 9, 8, 7, 14, 13, 12, 11, 10, 9, 8, 7, 6, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(14).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test15", List.of(15, 15, 14, 15, 14, 13, 15, 14, 13, 12, 15, 14, 13, 12, 11, 15, 14, 13, 12, 11, 10, 15, 14, 13, 12, 11, 10, 9, 15, 14, 13, 12, 11, 10, 9, 8, 15, 14, 13, 12, 11, 10, 9, 8, 7, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(15).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test16", List.of(16, 16, 15, 16, 15, 14, 16, 15, 14, 13, 16, 15, 14, 13, 12, 16, 15, 14, 13, 12, 11, 16, 15, 14, 13, 12, 11, 10, 16, 15, 14, 13, 12, 11, 10, 9, 16, 15, 14, 13, 12, 11, 10, 9, 8, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(16).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test17", List.of(17, 17, 16, 17, 16, 15, 17, 16, 15, 14, 17, 16, 15, 14, 13, 17, 16, 15, 14, 13, 12, 17, 16, 15, 14, 13, 12, 11, 17, 16, 15, 14, 13, 12, 11, 10, 17, 16, 15, 14, 13, 12, 11, 10, 9, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(17).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test18", List.of(18, 18, 17, 18, 17, 16, 18, 17, 16, 15, 18, 17, 16, 15, 14, 18, 17, 16, 15, 14, 13, 18, 17, 16, 15, 14, 13, 12, 18, 17, 16, 15, 14, 13, 12, 11, 18, 17, 16, 15, 14, 13, 12, 11, 10, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(18).boxed().collect(Collectors.toList()));
        assertEquals("pyramida/Test19", List.of(19, 19, 18, 19, 18, 17, 19, 18, 17, 16, 19, 18, 17, 16, 15, 19, 18, 17, 16, 15, 14, 19, 18, 17, 16, 15, 14, 13, 19, 18, 17, 16, 15, 14, 13, 12, 19, 18, 17, 16, 15, 14, 13, 12, 11, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1), Streams.pyramida(19).boxed().collect(Collectors.toList()));
        scoring.updateScore("lang:common_list_test_scoring_name", 17.0D);
    }

    @Test
    public void test1() {
        assertEquals("palindromy/Test20", List.of(), Streams.palindromy(IntStream.range(0, 1000 * 0)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test21", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999), Streams.palindromy(IntStream.range(0, 1000 * 1)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test22", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991), Streams.palindromy(IntStream.range(0, 1000 * 2)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test23", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992), Streams.palindromy(IntStream.range(0, 1000 * 3)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test24", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993), Streams.palindromy(IntStream.range(0, 1000 * 4)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test25", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994), Streams.palindromy(IntStream.range(0, 1000 * 5)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test26", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995), Streams.palindromy(IntStream.range(0, 1000 * 6)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test27", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996), Streams.palindromy(IntStream.range(0, 1000 * 7)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test28", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997), Streams.palindromy(IntStream.range(0, 1000 * 8)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test29", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998), Streams.palindromy(IntStream.range(0, 1000 * 9)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test30", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999), Streams.palindromy(IntStream.range(0, 1000 * 10)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test31", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901), Streams.palindromy(IntStream.range(0, 1000 * 11)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test32", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911), Streams.palindromy(IntStream.range(0, 1000 * 12)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test33", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921), Streams.palindromy(IntStream.range(0, 1000 * 13)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test34", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921, 13031, 13131, 13231, 13331, 13431, 13531, 13631, 13731, 13831, 13931), Streams.palindromy(IntStream.range(0, 1000 * 14)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test35", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921, 13031, 13131, 13231, 13331, 13431, 13531, 13631, 13731, 13831, 13931, 14041, 14141, 14241, 14341, 14441, 14541, 14641, 14741, 14841, 14941), Streams.palindromy(IntStream.range(0, 1000 * 15)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test36", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921, 13031, 13131, 13231, 13331, 13431, 13531, 13631, 13731, 13831, 13931, 14041, 14141, 14241, 14341, 14441, 14541, 14641, 14741, 14841, 14941, 15051, 15151, 15251, 15351, 15451, 15551, 15651, 15751, 15851, 15951), Streams.palindromy(IntStream.range(0, 1000 * 16)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test37", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921, 13031, 13131, 13231, 13331, 13431, 13531, 13631, 13731, 13831, 13931, 14041, 14141, 14241, 14341, 14441, 14541, 14641, 14741, 14841, 14941, 15051, 15151, 15251, 15351, 15451, 15551, 15651, 15751, 15851, 15951, 16061, 16161, 16261, 16361, 16461, 16561, 16661, 16761, 16861, 16961), Streams.palindromy(IntStream.range(0, 1000 * 17)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test38", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921, 13031, 13131, 13231, 13331, 13431, 13531, 13631, 13731, 13831, 13931, 14041, 14141, 14241, 14341, 14441, 14541, 14641, 14741, 14841, 14941, 15051, 15151, 15251, 15351, 15451, 15551, 15651, 15751, 15851, 15951, 16061, 16161, 16261, 16361, 16461, 16561, 16661, 16761, 16861, 16961, 17071, 17171, 17271, 17371, 17471, 17571, 17671, 17771, 17871, 17971), Streams.palindromy(IntStream.range(0, 1000 * 18)).boxed().collect(Collectors.toList()));
        assertEquals("palindromy/Test39", List.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999, 1001, 1111, 1221, 1331, 1441, 1551, 1661, 1771, 1881, 1991, 2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443, 3553, 3663, 3773, 3883, 3993, 4004, 4114, 4224, 4334, 4444, 4554, 4664, 4774, 4884, 4994, 5005, 5115, 5225, 5335, 5445, 5555, 5665, 5775, 5885, 5995, 6006, 6116, 6226, 6336, 6446, 6556, 6666, 6776, 6886, 6996, 7007, 7117, 7227, 7337, 7447, 7557, 7667, 7777, 7887, 7997, 8008, 8118, 8228, 8338, 8448, 8558, 8668, 8778, 8888, 8998, 9009, 9119, 9229, 9339, 9449, 9559, 9669, 9779, 9889, 9999, 10001, 10101, 10201, 10301, 10401, 10501, 10601, 10701, 10801, 10901, 11011, 11111, 11211, 11311, 11411, 11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921, 13031, 13131, 13231, 13331, 13431, 13531, 13631, 13731, 13831, 13931, 14041, 14141, 14241, 14341, 14441, 14541, 14641, 14741, 14841, 14941, 15051, 15151, 15251, 15351, 15451, 15551, 15651, 15751, 15851, 15951, 16061, 16161, 16261, 16361, 16461, 16561, 16661, 16761, 16861, 16961, 17071, 17171, 17271, 17371, 17471, 17571, 17671, 17771, 17871, 17971, 18081, 18181, 18281, 18381, 18481, 18581, 18681, 18781, 18881, 18981), Streams.palindromy(IntStream.range(0, 1000 * 19)).boxed().collect(Collectors.toList()));
        scoring.updateScore("lang:common_list_test_scoring_name", 17.0D);
    }

    @Test
    public void test2() {
        assertEquals("pocetDelitelov/Test40", List.of(), Streams.pocetDelitelov(IntStream.range(0,10*0).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test41", List.of( 1,1,2,2), Streams.pocetDelitelov(IntStream.range(0,10*1).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test42", List.of( 1,1,2,2,2,2,2,3,4,4), Streams.pocetDelitelov(IntStream.range(0,10*2).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test43", List.of( 1,1,1,2,2,2,2,2,2,2,2,2,3,4,4,4,4,6), Streams.pocetDelitelov(IntStream.range(0,10*3).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test44", List.of( 1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,4,4,4,4,6,6,7), Streams.pocetDelitelov(IntStream.range(0,10*4).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test45", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,6,6,6,6,7,8), Streams.pocetDelitelov(IntStream.range(0,10*5).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test46", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,4,4,6,6,6,6,6,6,7,8), Streams.pocetDelitelov(IntStream.range(0,10*6).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test47", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,7,8,10), Streams.pocetDelitelov(IntStream.range(0,10*7).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test48", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,7,8,10,10), Streams.pocetDelitelov(IntStream.range(0,10*8).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test49", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,7,8,8,10,10,10), Streams.pocetDelitelov(IntStream.range(0,10*9).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test50", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,7,8,8,10,10,10,10,10), Streams.pocetDelitelov(IntStream.range(0,10*10).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test51", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,10,10,10,10,10,10), Streams.pocetDelitelov(IntStream.range(0,10*11).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test52", List.of( 1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,10,10,10,10,10,10), Streams.pocetDelitelov(IntStream.range(0,10*12).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test53", List.of( 1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,10,10,10,10,10,10,10,14), Streams.pocetDelitelov(IntStream.range(0,10*13).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test54", List.of( 1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,10,10,10,10,10,10,10,10,14), Streams.pocetDelitelov(IntStream.range(0,10*14).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test55", List.of( 1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,10,10,10,10,10,10,10,10,10,13,14), Streams.pocetDelitelov(IntStream.range(0,10*15).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test56", List.of( 1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,10,10,10,10,10,10,10,10,10,10,10,13,14), Streams.pocetDelitelov(IntStream.range(0,10*16).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test57", List.of( 1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,13,14,14), Streams.pocetDelitelov(IntStream.range(0,10*17).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test58", List.of( 1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,13,14,14), Streams.pocetDelitelov(IntStream.range(0,10*18).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test59", List.of( 1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,13,14,14,16), Streams.pocetDelitelov(IntStream.range(0,10*19).boxed().collect(Collectors.toList())).values().stream().sorted().collect(Collectors.toList()));
        scoring.updateScore("lang:common_list_test_scoring_name",   33.0D);
    }

    @Test
    public void test3() {
        assertEquals("pocetDelitelov/Test60", List.of(), Streams.rozklad(0).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test61", List.of(), Streams.rozklad(0).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test62", List.of( 1,1,2), Streams.rozklad(726).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test63", List.of( 1,1,1,2), Streams.rozklad(1092).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test64", List.of( 2,2,3), Streams.rozklad(9800).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test65", List.of( 1,1,1,2), Streams.rozklad(2964).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test66", List.of( 1,1,1,4), Streams.rozklad(8976).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test67", List.of( 1,1,5), Streams.rozklad(1760).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test68", List.of( 1,1,1,1,2), Streams.rozklad(147186).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test69", List.of( 1,1,1,3), Streams.rozklad(11352).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test70", List.of( 1,1,2,4), Streams.rozklad(19152).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test71", List.of( 1,1,1,2,3), Streams.rozklad(117180).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test72", List.of( 1,1,2,6), Streams.rozklad(277020).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test73", List.of( 1,1,1,1,1), Streams.rozklad(2310).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test74", List.of( 1,1,1,1,4), Streams.rozklad(77520).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test75", List.of( 1,1,1,6), Streams.rozklad(200256).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test76", List.of( 1,1,1,1,1,1), Streams.rozklad(1720446).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test77", List.of( 1,1,4,7), Streams.rozklad(1192320).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test78", List.of( 1,1,4,7), Streams.rozklad(362880).values().stream().sorted().collect(Collectors.toList()));
        assertEquals("pocetDelitelov/Test79", List.of( 1,1,1,2,3), Streams.rozklad(1350440).values().stream().sorted().collect(Collectors.toList()));
        scoring.updateScore("lang:common_list_test_scoring_name",   33.0D);
    }
}